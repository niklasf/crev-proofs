----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-02-27T16:35:32.427251581+01:00"
from:
  id-type: crev
  id: a0hN0qYwwDTmHtAchnTXiF-I_L9rK1KL5kgCmQoYR9o
  url: "https://github.com/niklasf/crev-proofs"
package:
  source: "https://crates.io"
  name: lzw
  version: 0.10.0
  digest: ZsnrkEoM26ersMKHH_2za2XnY_0P09HoQWzIQ_-pUXQ
review:
  thoroughness: low
  understanding: medium
  rating: positive
comment: |-
  An implementation of LZW compression. Overall appearance is solid.
  
  + No unsafe code.
  + No unexpected panics. Indirectly fuzz tested by gif encoding crates like
    gif and gift.
  - Appears to be unmaintained.
  - Could use cleanups and performance optimizations.
  - Small test suite. Could use more roundtrip tests.
----- SIGN CREV PROOF -----
esd6gD1A5dsfNm6wUWsKpKHhHsaka10SDB6wr0r6qgrrxmlgn7MPXSri559qu0K-6uq_3lEdOp6PF_QmEY9hDQ
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-02-27T16:53:49.667653914+01:00"
from:
  id-type: crev
  id: a0hN0qYwwDTmHtAchnTXiF-I_L9rK1KL5kgCmQoYR9o
  url: "https://github.com/niklasf/crev-proofs"
package:
  source: "https://crates.io"
  name: gaviota-sys
  version: 0.1.12
  revision: e5f6999a28950ae363cc1d998c31238c3f4fadf4
  digest: mCaYomElWE2NXrLikCpO9waIGqZfMJkg2uTIHBQTvFY
review:
  thoroughness: low
  understanding: high
  rating: negative
comment: |-
  As the author of these bindings, I would not trust the underlying C library
  to handle malicious input. Verify the checksums of tablebase files! This is a
  good idea anyway.
  
  Assuming that is done, I am quite confident in the corectness of the probing
  results, based on years of production usage and comparison with Syzygy
  tablebases.
----- SIGN CREV PROOF -----
j9vcsC_eaEnU3RIUv-sWDexvEmdlkC1-ChTKkuFezH8BqO5feQfCFnMVD_7k_sqAzzektdisDOYPwJ4XqJt0BQ
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2020-02-27T17:00:40.589567634+01:00"
from:
  id-type: crev
  id: a0hN0qYwwDTmHtAchnTXiF-I_L9rK1KL5kgCmQoYR9o
  url: "https://github.com/niklasf/crev-proofs"
package:
  source: "https://crates.io"
  name: shakmaty
  version: 0.16.2
  revision: 109698bea4b0ef9c000e81351763a7720de61c2b
  digest: 9q-vMpokQfbQXU-M2bDHNna--R8iSvhTRPkKk698xy4
review:
  thoroughness: high
  understanding: high
  rating: positive
alternatives:
  - source: "https://crates.io"
    name: chess
  - source: "https://crates.io"
    name: pleco
comment: |-
  Implements chess and chess variant rules and operations.
  
  This is a self-assessment. I am the author of this crate.
  
  Soundness: I am highly confident in soundness. Unfortunately, I could not
  avoid two kinds of unsafe blocks, without major performance impact.
  Instead, all preconditions are explained thoroughly in comments and asserted
  with debug assertions.
  
  (1) The optimizer does not reliably elide bounds checks based on the
  assumption that u64::trailing_zeros() will never be larger than 63.
  This is important in many hot loops.
  
  (2) The perfect hash function for attack lookups always stays within bounds.
  This technique is called Magic Bitboards, widely used and very well
  understood in the chess community. When selecting magic factors, exactly this
  assumption is tested for all possible inputs.
  
  Correctness: For move generation in standard chess, confidence is based on a
  large test suite of randomly generated, as well as historical and tricky
  positions, so called perft tests. The numbers are shared in the chess
  community and compared across a wide array of implementations.
  
  I am gradually less confident in other features, especially chess variants,
  simply because they are less popular and played less often.
  
  The library has been used to parse 1 billion recorded real world games
  (https://database.lichess.org). Some bugs have been found, but in the source
  of the data, not this library.
  
  For handling of input formats (FEN, SAN, UCI) I reviewed the code thoroughly
  and used fuzz testing to ensure absence of DOS/panics.
----- SIGN CREV PROOF -----
GfB6JlCJRlujif2oVCdF20ex0dGQSldUHMYpQdTZcwSWkTIKpFsxHlBJJxZHjOqgQsIVTHQ5BQ31w816FUTsCA
----- END CREV PROOF -----

